{"version":3,"sources":["StackView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","View","StackView","React","Component","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","gestureEnabled","animationEnabled","options","undefined","Platform","OS","filter","r","includes","index","findIndex","props","render","setState","length","navigation","find","dispatch","StackActions","pop","source","target","closing","emit","type","data","currentRoute","getDerivedStateFromProps","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","keyboardHandlingEnabled","mode","rest","headerMode","styles","container","insets","getPreviousRoute","getGesturesEnabled","handleOpenRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","pageChangeStarted","onPageChangeStart","handlePageChangeStart","onPageChangeConfirm","handlePageChangeConfirm","onPageChangeCancel","handlePageChangeCancel","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport {\n  StackActions,\n  StackNavigationState,\n  Route,\n} from '@react-navigation/native';\n\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (props.state.routes === state.previousRoutes && state.routes.length) {\n      if (props.descriptors !== state.previousDescriptors) {\n        const descriptors = state.routes.reduce<StackDescriptorMap>(\n          (acc, route) => {\n            acc[route.key] =\n              props.descriptors[route.key] || state.descriptors[route.key];\n\n            return acc;\n          },\n          {}\n        );\n\n        return {\n          previousDescriptors: props.descriptors,\n          descriptors,\n        };\n      }\n\n      return null;\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.find(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                key => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                key => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private pageChangeStarted: boolean = false;\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      r =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex(r => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    this.setState(state => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n      replacingRouteKeys: [],\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.find(r => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState(state => ({\n        routes: state.routes.filter(r => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          key => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          key => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handlePageChangeStart = () => {\n    const { navigation, state } = this.props;\n    const currentRoute = state.routes[state.index];\n    navigation.emit({\n      type: 'pageChangeStart',\n      data: {},\n      target: currentRoute.key,\n    });\n  };\n\n  private handlePageChangeConfirm = () => {\n    const { navigation, state } = this.props;\n    const currentRoute = state.routes[state.index];\n    navigation.emit({\n      type: 'pageChangeConfirm',\n      data: {},\n      target: currentRoute.key,\n    });\n  };\n\n  private handlePageChangeCancel = () => {\n    const { navigation, state } = this.props;\n    const currentRoute = state.routes[state.index];\n    navigation.emit({\n      type: 'pageChangeCancel',\n      data: {},\n      target: currentRoute.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaConsumer>\n            {insets => (\n              <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                {props => (\n                  <CardStack\n                    mode={mode}\n                    insets={insets as EdgeInsets}\n                    getPreviousRoute={this.getPreviousRoute}\n                    getGesturesEnabled={this.getGesturesEnabled}\n                    routes={routes}\n                    openingRouteKeys={openingRouteKeys}\n                    closingRouteKeys={closingRouteKeys}\n                    onOpenRoute={this.handleOpenRoute}\n                    onCloseRoute={this.handleCloseRoute}\n                    onTransitionStart={this.handleTransitionStart}\n                    onTransitionEnd={this.handleTransitionEnd}\n                    renderHeader={this.renderHeader}\n                    renderScene={this.renderScene}\n                    headerMode={headerMode}\n                    state={state}\n                    descriptors={descriptors}\n                    {...rest}\n                    onPageChangeStart={() => {\n                      this.pageChangeStarted = true;\n                      props.onPageChangeStart();\n                      this.handlePageChangeStart();\n                    }}\n                    onPageChangeConfirm={() => {\n                      if (this.pageChangeStarted) {\n                        this.pageChangeStarted = false;\n                        props.onPageChangeConfirm();\n                        this.handlePageChangeConfirm();\n                      }\n                    }}\n                    onPageChangeCancel={() => {\n                      if (this.pageChangeStarted) {\n                        this.pageChangeStarted = false;\n                        props.onPageChangeCancel();\n                        this.handlePageChangeCancel();\n                      }\n                    }}\n                  />\n                )}\n              </KeyboardManager>\n            )}\n          </SafeAreaConsumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}